#!/bin/sh
write_target()
{
	echo "$1" > "$target"
}

set_bl()
{
	rounded_input=$(printf "%.0f" "$(echo "((255*$1)/100)+0.5" | bc -l)")
	if [ "$rounded_input" -ge "$max" ]; then
		write_target "$max"
	elif [ "$rounded_input" -le "$min" ]; then
		write_target "$min"
	else
		write_target "$rounded_input"
	fi
}

increase()
{
	current="$(cat $target)"
	rounded_input=$(printf "%.0f" "$(echo "$current+((255*$1)/100)" | bc -l)")
	if [ "$rounded_input" -ge "$max" ]; then
		write_target "$max"
	else
		write_target "$rounded_input"
	fi
}

decrease()
{
	current="$(cat $target)"
	rounded_input=$(printf "%.0f" "$(echo "$current-((255*$1)/100)" | bc -l)")
	if [ "$rounded_input" -le "$min" ]; then
		write_target "$min"
	else
		write_target "$rounded_input"
	fi
}

usage()
{
	cat <<EOF
Usage: $0 [ -i INCREASE_LEVEL ] | [ -d DECREASE_LEVEL ] | [ -s BL_LEVEL ] | -h

	-i [0..$max]	increase backlight level
	-d [0..$max]	decrease backlight level
	-s [0..100]		set backlight level

	-r 						show real values instead of percentage

	-h						display this text

EOF
	exit
}

unset inc dec setbl realvalues
max=255
min=0
target="/sys/class/backlight/amdgpu_bl1/brightness"

while getopts 'i:d:s:hr' opt; do
	case $opt in
	i) inc=true iarg=$OPTARG ;;
	d) dec=true darg=$OPTARG ;;
	s) setbl=true sarg=$OPTARG ;;
	r) realvalues=true ;;
	h | *) usage ;;
	esac

done

if [ -n "$inc" ]; then
	increase "$iarg"
elif [ -n "$dec" ]; then
	decrease "$darg"
elif [ -n "$setbl" ]; then
	set_bl "$sarg"
else
	level="$(cat $target)"
	if [ -n "$realvalues" ]; then
		echo "$level"
	else
		printf " %.0f%%\n" "$(echo "(($level*100)/255)+0.5" | bc -l)"
	fi
fi
